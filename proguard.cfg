-dontobfuscate
-dontoptimize 
#-dontshrink #When developing your app, I recommend that this option is enabled by default.Proguard is best used at the end,
#when your app is complete and tested.
#When  -dontshrink -dontoptimize and -ontobfuscate are all enabled, proguard can exist in your maven configuration/workflow without having any effect on the code.
-verbose
-dontpreverify
-printseeds seed.txt

-keep public class * extends android.app.Activity
-keep public class * extends android.app.Application
-keep public class * extends android.app.Service
-keep public class * extends android.content.BroadcastReceiver
-keep public class * extends android.content.ContentProvider
-keep public class com.android.vending.licensing.ILicensingService

#Note, the approach taken below is not ideal. 
#The best practicec seems to be to derive a config file
#which is able to look at the class tree and determine what is needed.
#In any case, here goes:
#From gen-class's doc: "Each file, fn and gen-class will produce a .class file
#Each file generates a loader class of the same name with "__init" appended." 
#Start with the configuration below, this causes all files in the clojure codebase to be kept.
#-keep class clojure.**init { *;}

#1) Once you have a successful  proguard run which yields a working app, take a look at  proguard_seeds.txt in target/
#2) Grok the file along the lines of the sed command shown below to pick up the relevant namespaces. 
#cat proguard_seeds.txt | sed -e s/^clojure.//g | sed -e s/\:.*$//g | uniq > ../clojure-inits.txt 
#3) Trim your classes from the bottom if necessary. See generated clojure-inits.txt for an example of what we want to extract.
#4) With these init files, we can begin pruning the code base to yield the smallest runtime that works for us. Ideally, the proguard configuration will  determine what is needed, but I have not found a way to make this work with clojure, given its dynamic nature and my limited understanding of proguard. The pruned configuration below was determined through looking at clojure.org and systematic trial and error (some of the namespaces are used internally.)
#5) This approach outlined should  actually work for any clojure app. The general idea is to remove unused namespaces. Using contrib libraries will have recursive dependancies. For clojure-contrib, a similar clojure.contrib.**init can be done, all unused contribs can be disabled. TODO: test this.
#6) The pruning reduced the binary size from 1.2mb to 900k. Since most of the fat comes from the runtime, your app should grow much more gradually from that point.

#===============Clojure related keep options===============
#The following cannot be disabled---------------
#Core classes
-keep public class clojure.core__init {*;}
-keep public class clojure.core_deftype__init {*;}
-keep public class clojure.core_proxy__init {*;}
-keep public class clojure.core.protocols__init {*;}
-keep public class clojure.core_print__init {*;}
-keep public class clojure.main__init {*;}

#These are used internally.Disabling them causes the app to not load.
#clojure.org has details on what they are.
-keep public class clojure.zip__init {*;}
-keep public class clojure.set__init {*;}
-keep public class clojure.string__init {*;}
-keep public class clojure.gvec__init {*;}
-keep public class clojure.genclass__init {*;}
-keep public class clojure.xml__init {*;}

#Java interop related, all except IO should not be needed in android.
#IO functions - This is needed for clojure
-keep public class clojure.java.io__init {*;}


#The following can be enabled if needed.---------------

# Tree walker, you will probably use them for complex apps
#-keep public class clojure.walk__init {*;}
#Clojure oriented stack traces. 
#-keep public class clojure.stacktrace__init {*;}
#For use in macros 
#-keep public class clojure.template__init {*;}
#Pretty printer not usually needed.
# -keep public class clojure.pprint.column_writer__init {*;}
# This may be needed if you are using cl-format.
# -keep public class clojure.pprint.cl_format__init {*;}
# -keep public class clojure.pprint.utilities__init {*;}
# -keep public class clojure.pprint.dispatch__init {*;}
# -keep public class clojure.pprint.pprint_base__init {*;}
# -keep ptublic class clojure.pprint__init {*;}
# -keep public class clojure.pprint.pretty_writer__init {*;}

#It should be ok to keep the following disabled---------------
#Test libs. I feel that they do not make sense in an android app as the tests are run on the jvm prior to proguard and dexing.
#-keep public class clojure.test.junit__init {*;}
#-keep public class clojure.test__init {*;}
#-keep public class clojure.test.tap__init {*;}

#Used for inspecting clojure data structures see clojure.org
#-keep public class clojure.inspector__init {*;}
#Repl is not needed in android env, can be disabled.
#-keep public class clojure.repl__init {*;}

#Start a web browser from clojure, not needed.
#-keep public class clojure.java.browse__init {*;}
#Launch a subprocess
#-keep public class clojure.java.shell__init {*;}
#Open javadoc in repl
#-keep public class clojure.java.javadoc__init {*;}
#-keep public class clojure.java.browse_ui__init {*;}

#End of clojure related keep options===============

# For now it is recommended that you keep your classes as-is.
-keep class com.hsaliak.** {*;}
# Required when exposes-methods is used. Without this, exposing super class methods with 
#alternate method names eg onCreate -> superOnCreate, does not seem to work
-keep class com.hsaliak.HelloFlashlight extends * {*;}
# Tip: when in doubt, browse to targets/classes and use javap to disassemble the class. 





-keepclasseswithmembernames class * {
    native <methods>;
}

-keepclasseswithmembernames class * {
    public <init>(android.content.Context, android.util.AttributeSet);
}

-keepclasseswithmembernames class * {
    public <init>(android.content.Context, android.util.AttributeSet, int);
}

-keepclassmembers enum * {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

-keep class * implements android.os.Parcelable {
  public static final android.os.Parcelable$Creator *;
}

-keep public class * extends android.view.View {
    public <init>(android.content.Context);
    public <init>(android.content.Context, android.util.AttributeSet);
    public <init>(android.content.Context, android.util.AttributeSet, int);
    public void set*(...);
}
-keepclassmembers class * {
	public void *(android.view.View);
}

-keepclassmembers class **.R$* {
    public static <fields>;
}
